<?php

namespace common\models\material;

use common\components\Common;
use common\models\material\inherit\Common as CommonModel;
use Yii;
use yii\db\ActiveQuery;
use yii\web\NotFoundHttpException;

/**
 * This is the model class for table "{{%field}}".
 *
 * @property int $id
 * @property int $group_id
 * @property string $slug
 * @property string $title
 * @property int $type
 * @property int $sort
 * @property int $status
 * @property int $is_require
 * @property int $is_hidden
 * @property int $is_search
 * @property string $default_value
 * @property string $params
 * @property ActiveQuery|Group $parent
 * @property ActiveQuery|MaterialField[] $materialFields
 */
class Field extends CommonModel
{
    private $totallyDelete = null;

    private static $types = [
        '0' => 'Заголовок материала',
        '100' => 'Текстовое поле',
        '200' => 'Текст',
        '300' => 'Текстовый редактор',
        '400' => 'Выбор',
        '500' => 'Множественный выбор',
        '600' => 'Файл',
        '700' => 'Файлы',
        '800' => 'Цвет',
        '900' => 'Иконка (font awesome)',
        '1000' => 'Дата',
        '1100' => 'Период (Даты)',
    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%field}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['group_id', 'slug', 'title', 'type'], 'required'],
            [['group_id', 'type', 'sort', 'status', 'is_require', 'is_hidden', 'is_search'], 'integer'],
            [['slug', 'title'], 'string', 'max' => 255],
            [['params', 'default_value'], 'string'],
            [['default_value'], 'default', 'value' => ''],
            [['sort', 'is_require', 'is_hidden', 'is_search'], 'default', 'value' => 0],
            [['status'], 'default', 'value' => 10],
            [['type'], 'in', 'range' => function () {
                return array_keys(self::$types);
            }]
        ];
    }

    public function attributeLabels()
    {

        return array_merge([
            'type' => 'Тип',
            'is_require' => 'Обязательно для заполнения',
            'params' => 'Дополнительные параметры',
            'is_hidden' => 'Скрытое поле',
            'is_search' => 'Поле поиска',
            'default_value' => 'Значение по умолчанию'
        ], parent::attributeLabels());
    }

    /**
     * @param bool $full
     * @return array
     */
    public static function getTypes($full = false)
    {
        $types = self::$types;
        if (!$full) {
            unset($types[0]);
        }
        return $types;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMaterialFields()
    {
        return $this->hasMany(MaterialField::className(), ['field_id' => 'id']);
    }

    /**
     * @param $id
     * @return Group|null
     * @throws NotFoundHttpException
     */
    public function findParent($id)
    {
        $model = Group::findOne($id);
        if ($model !== null) {
            return $model;
        }

        throw new NotFoundHttpException();
    }

    /**
     * {@inheritdoc}
     */
    public function toCopy($parentId)
    {
        $model = new self();
        $model->attributes = $this->attributes;
        $model->id = null;
        $model->group_id = $parentId;
        if ($model->save()) {
            return true;
        }
        return false;
    }

    /**
     * @param Group $parent
     * @return bool
     */
    public static function createBasicFields($parent)
    {
        $model = new self();
        $model->title = 'Заголовок';
        $model->type = 0;
        $model->group_id = $parent->id;
        $model->status = 100;
        return $model->save();
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->sort = $this->getSortValue();
        }
        if ($this->getScenario() == self::SCENARIO_EDIT) {
            $model = self::findOne($this->id);
            if ($model->status == 100 && $this->status != $model->status) {
                return false;
            }
        }
        if (!$this->params) {
            $this->params = null;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function beforeDelete()
    {
        if ($this->status == 100 && !$this->totallyDelete) {
            Yii::$app->session->setFlash('danger', 'Не удалось удалить некторые элементы (Они являются обязательными для каждого материала).');
            return false;
        }
        Common::deleteAll($this->materialFields);
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $totally
     * @return false|int
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function delete($totally = false)
    {
        $this->totallyDelete = $totally;
        return parent::delete(); // TODO: Change the autogenerated stub
    }
}
