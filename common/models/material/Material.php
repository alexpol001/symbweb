<?php

namespace common\models\material;

use common\components\Common;
use common\models\material\inherit\Common as CommonModel;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveQuery;
use yii\web\NotFoundHttpException;
use zabachok\behaviors\SluggableBehavior;

/**
 * @property int $id
 * @property string $slug
 * @property string $title
 * @property int $group_id
 * @property int $material_id
 * @property int $sort
 * @property int $status
 * @property int $created_at
 * @property int $updated_at
 * @property ActiveQuery|Field[] $fields
 */
class Material extends CommonModel
{
    public $PostData;
    private $titleLabel = 'Название';

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%material}}';
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            [
                'class' => SluggableBehavior::className(),
                'attribute' => ['title'],
                'ensureUnique' => true,
                'uniqueValidator' => ['targetAttribute' => ['slug', 'group_id', 'material_id']]
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['slug', 'title'], 'required'],
            [['group_id', 'material_id', 'sort', 'status', 'created_at', 'updated_at'], 'integer'],
            [['slug', 'title'], 'string', 'max' => 255],
            [['sort', 'group_id', 'material_id'], 'default', 'value' => 0],
            [['status'], 'default', 'value' => 10],
        ];
    }

    public function attributeLabels()
    {

        return array_merge(array_merge([
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ], parent::attributeLabels()),
            [
                'title' => $this->titleLabel
            ]);
    }

    /**
     * @param $id
     * @return Group|null
     * @throws NotFoundHttpException
     */
    public function findParent($id)
    {
        if ($model = Group::findOne($id)) {
            return $model;
        }

        throw new NotFoundHttpException();
    }

    /**
     * @param $title
     */
    public function setLabelTitle($title)
    {
        $this->titleLabel = $title;
    }

    /**
     * @return Material|null
     */
    public function getMaterialParent()
    {
        return self::findOne($this->material_id);
    }

    /**
     * @param $id
     * @return string|null
     */
    public function getValue($id)
    {
        /** @var MaterialField $field */
        $field = MaterialField::findOne(['field_id' => $id, 'material_id' => $this->id]);
        return $field ? $field->value : null;
    }


    /**
     * @param null $group_id
     * @param array $exclude
     * @return Material[]|\yii\db\ActiveRecord[]
     */
    public function getMaterials($group_id = null, $exclude = [])
    {
        $params = ['material_id' => $this->id];
        if ($group_id) {
            $params['group_id'] = $group_id;
        }
        $materials = self::find()
            ->where(['not in','id', $exclude])
            ->andWhere($params)->andWhere(['>', 'status', 0])
            ->orderBy(['sort' => SORT_ASC])->all();
        return $materials;
    }

    /**
     * @return ActiveQuery
     */
    public function getFields()
    {
        return $this->hasMany(MaterialField::className(), ['material_id' => 'id']);
    }

    public static function getMaterialsByFieldValue($field_id, $value, $exclude = [])
    {
        $materials = [];
        /** @var Material $material */
        $field = Field::findOne($field_id);
        if ($field) {
            foreach ($field->parent->parent->materials as $material) {
                if ($material->getValue($field_id) == $value && !in_array($material->id, $exclude)) {
                    $materials[] = $material;
                }
            }
        }
        return $materials;
    }

    protected function getSortValue($params = null)
    {
        if ($model = $this->getMaterialParent()) {
            $params = ['group_id' => $this->parent->id, 'material_id' => $model->id];
        }
        return CommonModel::getSortValue($params); // TODO: Change the autogenerated stub
    }

    public function isHiddenTitle()
    {
        $group = Group::findOne($this->parent->id);
        $group = Group::findOne(['group_id' => $group->id, 'status' => 100]);
        return Field::findOne(['group_id' => $group->id, 'type' => 0, 'is_hidden' => 1]) ? true : false;
    }

    /**
     * {@inheritdoc}
     */
    public function toCopy($parentId)
    {
        $model = new self();
        $model->attributes = $this->attributes;
        $model->id = null;
        $model->material_id = $parentId;
        $model->setCopy($this->id);
        if ($model->save()) {
            /** @var MaterialField $field */
            foreach ($this->fields as $field) {
                $field->toCopy($model->id);
            }
            return true;
        }
        return false;
    }

    public function load($data, $formName = null)
    {
        $this->PostData = $data;
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($insert) {
            if ($this->parent->config && $this->parent->materials[0]) {
                return false;
            }
            $this->sort = $this->getSortValue();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function beforeDelete()
    {
        Common::deleteAll($this->fields);
        Common::deleteAll($this->getMaterials());
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function afterSave($insert, $changedAttributes)
    {
        if ($this->scenario != self::SCENARIO_EDIT) {
            MaterialField::saveFields($this);
        }
        if ($this->copy) {
            $model = self::findOne($this->copy);

            /** @var Material $material */
            foreach ($model->getMaterials() as $material) {
                $material->toCopy($this->id);
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @param int $parent
     * @return bool
     */
    public static function isHaveParent($parent)
    {
        $params = Yii::$app->getRequest()->getQueryParams();
        if ($params['parent'] == $parent) return true;
        $material = self::findOne($params['id']);
        while ($material) {
            if ($material->parent->id == $parent) {
                return true;
            }
            $material = $material->getMaterialParent();
        }
        return false;
    }
}
